#!/bin/bash
#
# This is a helper script for the Mer SDK to manage sb2 target and
# toolchain installation

set -o nounset
shopt -s extglob

# Make sure normal users can use any dirs we make
umask 022

SELF=$(basename "$0")
____=${SELF//?/ }

usage() {
    cat >&2 <<EOF
Try '$SELF --help' for more information.
EOF
}

help() {
    cat >&2 <<EOF
usage:
    $SELF tooling list [-l|--long]
    $SELF tooling upgradable <name>
    $SELF tooling install <name> <url>
    $SELF tooling remove <name>
    $SELF tooling refresh {--all | <name>...}
    $SELF tooling update <name>
    $SELF tooling register [--user <user> [--password <password>]] [--force]
    $____                  {--all | <name>...}

    $SELF target list [-l|--long] [--tooling <name>]
    $SELF target upgradable <name>
    $SELF target install <name> <url> [--tooling <name>
    $____                [--tooling-url <url>]] [--toolchain <name>]
    $SELF target remove  <name>
    $SELF target refresh {--all | <name>...}
    $SELF target update <name>
    $SELF target sync <name>
    $SELF target import <name>
    $SELF target register [--user <user> [--password <password>]] [--force]
    $____                 {--all | <name>...}

    $SELF toolchain list <tooling>
    $SELF toolchain install <tooling> <name>...
    $SELF toolchain remove <tooling> <name>...

    $SELF develpkg list <target> [<search string>]
    $SELF develpkg install <target> <name>...
    $SELF develpkg remove <target> <name>...

    $SELF sdk version
    $SELF sdk refresh
    $SELF sdk upgradable
    $SELF sdk upgrade
    $SELF sdk status
    $SELF sdk register [--user <user> [--password <password>]] [--force]

    $SELF refresh-all

    $SELF register-all [--user <user> [--password <password>]] [--force]

    $SELF --version

Usage notes
    $SELF target install
        When tooling selection is forced with '--tooling' without passing
        '--tooling-url', the selected tooling MUST exist.  If '--tooling-url' is
        passed as well, the tooling MAY NOT exist, in which case it will be
        installed automatically prior to target installation.

Global options
    -m, --mode <mode>
        Accepts one of 'user' or 'installer'. By default the user mode is
        active. Targets and toolings installed in the installer mode cannot be
        removed in the user mode. This option is not meant to be used by
        regular users.

For more information see https://sailfishos.org/wiki/Platform_SDK

EOF
}

if [[ $EUID -eq 0 ]]; then
    echo >&2 "WARNING: Invoking $0 as root is deprecated."
    if [[ -n ${SUDO_USER:-} ]]; then
        exec sudo -i -u $SUDO_USER $0 "$@"
        echo >&2 "sudo as '$SUDO_USER' failed"
        exit 1
    else
        echo >&2 "Cannot determine Mer SDK user. Invoke $0 as non-root to fix this."
        exit 1
    fi
fi

################################################################'
# Common utilities

# When sb2 is used outside of home directory CWD mapping may not be possible.
# This would break e.g. `sdk-manage target install <pkg>` when invoked outside
# of home directory - zypper would fail.  The `cd` is intentionally
# unconditional, so that eventual issues are discovered ASAP.
sb2() ( cd; command sb2 "$@" )

print_array() {
    local array=("$@")
    declare -p array |sed 's/^[^=]*=//'
}

# Unpack result of `print_array` to variables passed as second and following args
unpack() {
    (eval local -a array=$1) 2>/dev/null || return
    eval local -a array=$1
    shift
    local i=0
    while [[ $# -gt 0 ]]; do
        if [[ $(declare -p "$1") == "declare -a "* ]]; then
            eval local -a array_item=${array[i++]}
            eval $1=\(\${array_item[@]:+"\${array_item[@]}"}\)
        else
            eval $1=\${array[i++]}
        fi
        shift
    done
}

# Suppress command's stderr unless it exits with non-zero
silent() {
    local stderr=
    { stderr=$("$@" 3>&1 1>&2 2>&3 3>&-); } 2>&1
    local rc=$?
    [[ $rc -eq 0 ]] || printf >&2 "%s\n" "$stderr"
    return $rc
}

assert_name_valid() {
    local name=$1
    if ! [[ $name ]]; then
        echo >&2 "Name cannot be an empty string"
        return 1
    fi
    if ! [[ $name =~ ^[[:alnum:]_.-]*$ ]]; then
        echo >&2 "Name cannot consist of non-alphanumeric characters other than '_-.': '$name'"
        return 1
    fi
    if ! [[ $name =~ ^[[:alnum:]] ]]; then
        echo >&2 "Name must start with an alphanumeric character: '$name'"
        return 1
    fi
}

# Downloads file at ${url} into ${tmp_dir} using ${local_file_hint} as file name, unless ${url}
# points to a local file already, in which case the file is to be used directly.
#
# On success prints array with following items:
#  - local file path
#  - non-empty if the file was actually downloaded
#
# Returns non-zero on failure.
download() {
    local url=$1 tmp_dir=$2 local_file_hint=$3

    local local_file= downloaded=

    url=${url#file://}

    local_file_hint+=.tar.${url##*.}

    if ! [[ $url =~ ^(http|ftp)s?:// ]]; then
        local_file=$(readlink -f "$url") || return
        print_array "$local_file" "$downloaded"
        return
    fi

    local_file=$tmp_dir/$local_file_hint
    local orig_downloaded_file=$tmp_dir/${url##*/}
    local md5file="$orig_downloaded_file.md5sum"
    local md5sum_failed=

    local suceeded=
    download_cleanup() (
        trap 'echo cleaning up...' INT TERM HUP
        rm -f "$md5file"
        if [[ ! $succeeded ]]; then
            rm -f "$orig_downloaded_file"
            rm -f "$local_file"
        fi
    )
    trap 'download_cleanup; trap - RETURN' RETURN
    trap 'return 1' INT TERM HUP

    echo >&2 "Downloading '${url##*/}'"
    curl "$url" -o "$orig_downloaded_file"
    curl_status=$?

    if [[ $curl_status -eq 0 ]] ; then
        # check if md5sum file exists
        if curl --output /dev/null --silent --head --fail "$url.md5sum"; then
            # md5sum exists, let's check it
            curl --silent "$url.md5sum" > "$md5file"
            if ! (cd "$tmp_dir" && md5sum --status -c "$md5file"); then
                echo >&2 "ERROR: md5sum check failed for file '$orig_downloaded_file'!"
                md5sum_failed=1
            else
                echo >&2 "INFO: md5sum matches - download ok"
            fi
        else
            echo >&2 "WARNING: No md5sum file found - can not verify file integrity."
        fi
    fi

    if [[ $curl_status -ne 0 || ! -f $orig_downloaded_file || $md5sum_failed ||
        $(stat -c %s "$orig_downloaded_file") -lt 10000 ]]; then
        echo >&2 "Download failed!"
        return 1
    fi

    if ! [[ $orig_downloaded_file -ef $local_file ]]; then
        mv -f "$orig_downloaded_file" "$local_file" || return
    fi

    downloaded=1

    print_array "$local_file" "$downloaded"

    succeeded=1
}

maybe_decompress_tarball() {
    local file=$1
    local mime=
    mime=$(file --brief --mime-type "$file")
    if [[ $mime == application/x-tar ]]; then
        cat "$file"
    else
        7z x -so "$file"
    fi
}

# Extends standard ssu CLI with '--root <dir>' option and 'arch' command
ssu() (
    while [[ $# -gt 0 ]]; do
        case $1 in
            --root)
                shift
                export SSU_SANDBOX_DIR=$1
                export LD_PRELOAD=/usr/lib/ssu/libsandboxhook.so
                ;;
            arch)
                sed -n 's/^arch=//; T; p' ${SSU_SANDBOX_DIR:-}/etc/ssu/ssu.ini
                return
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    silent command ssu "$@"
)

disk_full() [[ $(stat --file-system --format '%a*%s/1024' "$1") -lt 10000 ]]

# Replace 'shell' field in `getent passwd` output with /bin/bash
fix_shell() {
    cut -d: -f1-6 |sed 's,$,:/bin/bash,'
}

manage_user_targets_repository() {
    $USER_TARGETS_REPOSITORY/manage.sh --repository "$USER_TARGETS_REPOSITORY" "$@"
}

################################################################'
# Polymorphic utilities for common operations on targets, toolings and the SDK itself.
#
# Notice the use of the terms 'object' and 'type'.

get_all_of_type() {
    local type=$1
    get_all_of_type_$type
}

get_all_or_selected_of_type() {
    local type=$1
    shift

    local objects= object= get_all=
    if [[ ${1:-} == "--all" ]]; then
        objects=($(get_all_of_type "$type")) || return
        get_all=1
        shift
    else
        objects=("$@")
        for object in "${objects[@]}"; do
            assert_object_exists "$type:$object" || return
        done
    fi

    # Fail here if --all was not used and no objects were given
    [[ ${#objects[*]} -ne 0 || $get_all ]] || { usage; return 1; }

    echo -n "${objects[@]}"
}

print_object() {
    local type=${1%:*} object=${1#*:}

    case $type in
        sdk) echo -n "SDK";;
        *) echo -n "$type '$object'";;
    esac
}

assert_object_exists() {
    local type=${1%:*} object=${1#*:}

    assert_${type}_exists "$object"
}

enter() {
    local type=${1%:*} object=${1#*:} cmd=("${@:2}")

    if [[ $type == sdk ]]; then
        sudo "${cmd[@]}"
    else
        enter_$type "$object" "${cmd[@]}"
    fi
}

object_zypper() {
    local object=$1 args=("${@:2}")

    enter "$object" zypper --quiet --non-interactive "${args[@]}"
}

register_object() {
    local type=$1
    shift

    local credentials= username= password= other=()
    credentials=$(get_register_credentials "$@") || return
    unpack "$credentials" username password other

    local force= i=
    for ((i=0; i < ${#other[@]}; ++i)); do
        if [[ ${other[i]} == --force ]]; then
            force=1
            unset other[i]
            break
        fi
    done

    set -- ${other[@]:+"${other[@]}"}

    local objects=
    if [[ $type == sdk ]]; then
        [[ $# -eq 0 ]] || { usage; return 1; }
        objects=('')
    else
        objects=($(get_all_or_selected_of_type "$type" "$@")) || return
    fi

    local object= domain=
    for object in "${objects[@]}"; do
        object=$type:$object
        domain=$(enter "$object" sdk-register -d) || return
        if [[ $domain != jolla && ! $force ]]; then
            echo >&2 "Registration not needed for $(print_object "$object") (domain: ${domain:-empty})"
            continue
        fi

        echo >&2 -n "$(print_object "$object"): "
        enter "$object" sdk-register -u "$username" -p "$password" || return
    done
}

register_all() {
    local credentials= username= password= other=()
    credentials=$(get_register_credentials "$@") || return
    unpack "$credentials" username password other

    set -- ${other[@]:+"${other[@]}"}

    local force=
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force=1
                ;;
            *)
                echo >&2 "unrecognized option '$1'"
                usage
                return 1
                ;;
        esac
        shift
    done

    set -- --user "$username" --password "$password" ${force:+--force}

    manage_sdk register "$@" || return
    manage_toolings register "$@" --all || return
    manage_targets register "$@" --all
}

refresh_objects() {
    local type=$1
    shift

    local objects=
    if [[ $type == sdk ]]; then
        objects=('')
    else
        objects=($(get_all_or_selected_of_type "$type" "$@")) || return
    fi

    local object=
    for object in "${objects[@]}"; do
        object_zypper "$type:$object" refresh -f
    done
}

object_upgradable() {
    local type=$1 object=${2:-}

    if [[ $type != sdk ]]; then
        assert_object_exists "$type:$object" || return
    fi

    object_zypper "$type:$object" --no-refresh list-updates
}

upgrade_object() {
    local type=$1 object=${2:-}

    if [[ $type != sdk ]]; then
        assert_object_exists "$type:$object" || return
    fi

    object_zypper "$type:$object" dup || return

    if [[ $type == target ]]; then
        # Prevent "Database environment version mismatch" errors e.g. after upgrading RPM
        enter_target "$object" rpm --rebuilddb || return
    fi
}

################################################################'
# tooling management

tooling_exists() [[ -e $MER_TOOLINGS/$1 ]]

get_tooling_mode()
{
    local tooling=$1
    cat "$MER_TOOLINGS/$tooling/$MODE_FILE" 2>/dev/null || echo "$MODE_USER"
}

set_tooling_mode()
{
    local tooling=$1 mode=$2
    echo "$mode" |sudo tee >/dev/null "$MER_TOOLINGS/$tooling/$MODE_FILE"
}

# specialization of assert_object_exists()
assert_tooling_exists() {
    local tooling=$1

    assert_name_valid "$tooling" || return
    if ! tooling_exists "$tooling"; then
        echo >&2 "Unknown tooling: $tooling"
        return 1
    fi
}

# specialization of enter()
enter_tooling() {
    local tooling=$1 cmd=("${@:2}")

    assert_tooling_exists "$tooling" || return
    sudo "$MER_TOOLINGS/$tooling/mer-tooling-chroot" "${cmd[@]}"
}

# specialization of get_all_of_type()
get_all_of_type_tooling() {
    local tooling
    while read tooling; do
        if ! assert_name_valid "$tooling" 2>/dev/null; then
            echo >&2 "Ignoring tooling with invalid name '$tooling'"
            continue
        fi
        echo "$tooling"
    done < <(ls --literal "$MER_TOOLINGS")
}

list_toolings() {
    local long=
    while [[ $# -gt 0 ]]; do
        case $1 in
            -l|--long)
                long=1
                ;;
            *)
                echo >&2 "unrecognized option '$1'"
                usage
                return 1
                ;;
        esac
        shift
    done

    if [[ ! $long ]]; then
        get_all_of_type_tooling
        return
    fi

    local tooling=
    for tooling in $(get_all_of_type_tooling); do
        echo "$tooling" "$(get_tooling_mode "$tooling")"
    done |column -t
}

# Our toolchains are available through patterns-sailfish-sb2-* meta-packages
get_toolchains() {
    local tooling=$1
    object_zypper "tooling:$tooling" --no-refresh search "patterns-sailfish-sb2-*" | \
	grep patterns-sailfish-sb2 |grep -v sb2-common | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done
    return ${PIPESTATUS[0]}
}

ensure_installed() {
    local tooling=$1 toolchain=$2
    # Do not require building zypper caches as this is not always possible
    enter_tooling "$tooling" rpm -qa --queryformat='%{name}\n' |grep -q -F --line-regexp "$toolchain"
}

ensure_installable() {
    local tooling=$1 toolchain=$2
    get_toolchains "$tooling" |grep -q -F --line-regexp "$toolchain,"
}

install_toolchain() {
    local tooling=$1 pkg=$2
    if ! ensure_installable "$tooling" "$pkg"; then
        echo >&2 "Toolchain '$pkg' doesn't exist or is already installed - can not install."
        return 1
    fi

    object_zypper "tooling:$tooling" --no-refresh install "$pkg"
}

install_tooling() {
    local name=$1 url=$2

    assert_name_valid "$name" || return

    if tooling_exists "$name"; then
        echo >&2 "Name already in use: $name"
        return 1
    fi

    sudo mkdir -p "$MER_TOOLINGS" || return

    local download_result= local_file= downloaded=

    local succeeded=
    install_tooling_cleanup() (
        trap 'echo cleaning up...' INT TERM HUP
        if [[ $download_result ]]; then
            local local_file= downloaded=
            if unpack "$download_result" local_file downloaded && [[ $downloaded ]]; then
                rm -f "$local_file"
            fi
        fi
        if [[ ! $succeeded ]]; then
            sudo rm -rf "$MER_TOOLINGS/$name"
        fi
    )
    trap 'install_tooling_cleanup; trap - RETURN' RETURN
    trap 'return 1' INT TERM HUP

    download_result=$(download "$url" "$TMPDIR_DOWNLOADS" "$name") || return
    unpack "$download_result" local_file downloaded

    sudo rm -rf "$MER_TOOLINGS/$name" || return
    sudo mkdir -p "$MER_TOOLINGS/$name" || return

    echo >&2 "Unpacking tooling ..."
    if ! maybe_decompress_tarball "$local_file" | sudo tar -C "$MER_TOOLINGS/$name" -x; then
        if disk_full "$MER_TOOLINGS"; then
            echo >&2 "Not enough disk space to unpack tooling image"
        else
            echo >&2 "Could not unpack tooling image"
        fi
        return 1
    fi

    if [[ $MODE == "$MODE_USER" ]]; then
        if [[ $INSIDE_VBOX ]]; then
            local size=$(sudo du --summarize --bytes "$MER_TOOLINGS/$name" |cut -f1)
            manage_user_targets_repository touch tooling "$name" "${size:-0}"
        fi
    else
        set_tooling_mode "$name" "$MODE"
    fi

    echo >&2 "Tooling '$name' now setup"
    succeeded=1
}

remove_tooling() {
    local name=$1

    assert_name_valid "$name" || return

    local mode=$(get_tooling_mode "$name")
    if [[ $MODE != "$mode" ]]; then
        echo >&2 "The tooling '$name' can only be removed in the '$mode' mode."
        return 1
    fi

    local targets=$(get_targets_using_tooling "$name")
    if [[ $targets ]]; then
        targets=$(echo $targets |sed 's/ /, /')
        echo >&2 "Cannot remove tooling '$name': Tooling used by following targets: '$targets'"
        return 1
    fi

    sudo rm -rf "$MER_TOOLINGS/$name"

    if [[ $INSIDE_VBOX && $mode == "$MODE_USER" ]]; then
        manage_user_targets_repository rm tooling "$name"
    fi
}

manage_toolings() {
    if ! [[ ${1:-} ]]; then
        usage
        return 1
    fi

    case $1 in
        ?(--)list ) shift
            list_toolings "$@"
            ;;
        ?(--)upgradable ) shift
            object_upgradable tooling "$@"
            ;;
        ?(--)install ) shift
            install_tooling "$@"
            ;;
        ?(--)remove ) shift
            remove_tooling "$@"
            ;;
        ?(--)refresh ) shift
            refresh_objects tooling "$@"
            ;;
        ?(--)update ) shift
            upgrade_object tooling "$@"
            ;;
        ?(--)register ) shift
            register_object tooling "$@"
            ;;
        * )
            echo >&2 "unrecognized option '$1'"
            usage
            return 1
            ;;
    esac
}

################################################################'
# Toolchains

manage_toolchains() {
    if ! [[ {$1:-} ]]; then
        usage
        return 1
    fi

    case $1 in
        ?(--)list ) shift
            local tooling=${1:-}
            assert_tooling_exists "$tooling" || return
            get_toolchains "$tooling"
            ;;
        ?(--)install ) shift
            local tooling=${1:-}
            assert_tooling_exists "$tooling" || return
            shift
            object_zypper "tooling:$tooling" --no-refresh install "$@" || return
            ;;
        ?(--)remove ) shift
            local tooling=${1:-}
            assert_tooling_exists "$tooling" || return
            shift
            object_zypper "tooling:$tooling" --no-refresh remove "$@" || return
            ;;
        * )
            echo >&2 "unrecognized option '$1'"
            usage
            return 1
            ;;
    esac
}

################################################################'
# Devel packages

# Our devel packages are available through zypper as -devel packages

# specialization of assert_object_exists()
assert_target_exists() {
    local target=$1
    assert_name_valid "$target" || return
    if ! [[ -f $SBOX2DIR/$target/sb2.config ]]; then
        echo >&2 "Target '$target' is not a valid Scratchbox2 target"
        return 1
    fi

    if ! check_target_visible "$target"; then
        echo >&2 "Target '$target' is not accessible"
        return 1
    fi
}

# specialization of enter()
enter_target() {
    local target=$1
    shift
    sb2 -t "$target" -m sdk-install -R "$@"
}

get_develpkgs() {
    local target=$1 search=$2
    # do not include sourcepackages to the list (-t package -t pattern)
    object_zypper "target:$target" --no-refresh search -t package -t pattern -- ${search:+"$search"} 2>&1 | \
	sed '0,/---------/d' | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done
    return ${PIPESTATUS[0]}
}

manage_develpkgs() {
    if ! [[ {$1:-} ]]; then
        usage
        return 1
    fi

    case $1 in
	?(--)list ) shift
            local target=${1:-} search=${2:-}
            assert_target_exists "$target" || return
            get_develpkgs "$target" "$search"
	    ;;
	?(--)install ) shift
            local target=${1:-}
            assert_target_exists "$target" || return
            shift
            object_zypper "target:$target" --no-refresh install "$@" || return
            [[ $INSIDE_VBOX ]] && synchronise_target "$target"
	    ;;
	?(--)remove ) shift
            local target=${1:-}
            assert_target_exists "$target" || return
            shift
            object_zypper "target:$target" --no-refresh remove "$@" || return
            [[ $INSIDE_VBOX ]] && synchronise_target "$target"
	    ;;
	* )
            echo >&2 "unrecognized option '$1'"
            usage
            return 1
	    ;;
    esac
}

################################################################
# Targets

get_target_mode()
{
    local target=$1
    cat "$MER_TARGETS/$target/$MODE_FILE" 2>/dev/null || echo "$MODE_USER"
}

set_target_mode()
{
    local target=$1 mode=$2
    echo "$mode" >"$MER_TARGETS/$target/$MODE_FILE"
}

target_exists() {
    local target=$1
    # sb2-config is verbose when no target exists
    sb2-config -f 2>/dev/null |grep -q -F --line-regexp "$target"
}

check_target_visible() (
    local target=$1
    set +u
    . $SBOX2DIR/$target/sb2.config
    test -d "$SBOX_TARGET_ROOT"
)

# Specialization of get_all_of_type()
get_all_of_type_target() {
    # sb2-config is verbose when no target exists
    sb2-config -f 2>/dev/null
}

get_tooling_used_by_target() (
    local target=$1
    set +u
    . $SBOX2DIR/$target/sb2.config
    if [[ $SBOX_TOOLS_ROOT == "$MER_TOOLINGS"/* ]]; then
        echo "${SBOX_TOOLS_ROOT#$MER_TOOLINGS/}"
    else
        return 1
    fi
)

get_targets_using_tooling() {
    local tooling=$1
    local target=
    for target in $(get_all_of_type_target); do
        [[ $(get_tooling_used_by_target "$target") == $tooling ]] && echo "$target"
    done
}

list_targets() {
    local long= tooling=
    while [[ $# -gt 0 ]]; do
        case $1 in
            -l|--long)
                long=1
                ;;
            --tooling)
                tooling=${2:-}
                if [[ ! $tooling ]]; then
                    echo >&2 "$1: Argument expected"
                    usage
                    return 1
                fi
                shift
                ;;
            *)
                echo >&2 "unrecognized option '$1'"
                usage
                return 1
                ;;
        esac
        shift
    done

    local targets=
    if [[ $tooling ]]; then
        targets=$(get_targets_using_tooling "$tooling") || return
    else
        targets=$(get_all_of_type_target) || return
    fi

    if [[ ! $long ]]; then
        cat <<<"$targets"
        return
    fi

    local target=
    for target in $targets; do
        tooling=$(get_tooling_used_by_target "$target") # may fail
        echo "$target" "${tooling:--}" "$(get_target_mode "$target")"
    done |column -t
    return ${PIPESTATUS[0]}
}

synchronise_target() {
    local target=$1
    # This is now a minimal set of files to sync
    if ! [[ -d $MER_TARGETS/$target ]]; then
        echo >&2 "No target called '$target'"
        return 1
    fi
    echo >&2 "Synchronising target to host"
    # The filter=". -" means to read filters from stdin (the <<EOF)
    rsync -a --no-devices --no-specials \
          --delete --ignore-errors \
	  --prune-empty-dirs  --copy-links \
	  --filter=". -" \
          "$MER_TARGETS/$target/." "$HOST_TARGETS/$target/." <<EOF || return
# Ensure all dirs are copied (--prune-empty-dirs will clean up)
+ */
# We want this for QtCreator to determine the architecture
+ /usr/lib/libQt*Core.so
# Don't need any other .so files
- *.so
# All the import, include and qt* shares
+ /usr/lib/qt*/imports**
# Qt5 qml imports are here
+ /usr/lib/qt5/qml**
+ /usr/include**
+ /usr/share/qt**
+ /usr/lib/pkgconfig**
+ /usr/share/pkgconfig**
# and nothing else
- *
EOF
    # We need /usr/bin/stopCreatorSegfaulting for Creator's happiness
    mkdir -p "$HOST_TARGETS/$target/usr/bin" || return
    touch "$HOST_TARGETS/$target/usr/bin/stopCreatorSegfaulting" || return
    # For Qt5, QtCreator needs to see this dir or it thinks Qt version is not properly installed
    mkdir -p "$HOST_TARGETS/$target/usr/lib/qt5/bin/" || return
    # Qt Creator needs to know where to search for Linguist and Designer binaries
    cat <<EOF > "$HOST_TARGETS/$target/usr/share/qt5/mkspecs/modules/qt_lib_sailfishsdk.pri" || return
QT.designer.bins = \$\$absolute_path(../../../../../../../../bin/)
EOF

    echo >&2 "Sync completed"
}

import_target() {
    local target=$1
    # This could be minimised in the future if sf is not fixed
    # Ignore errors as we sometimes have dangling symlinks and
    # still want to keep clean
    if ! [[ -d $HOST_TARGETS/$target ]]; then
        echo >&2 "No host target called '$target'"
        return 1
    fi
    rsync -a --no-devices --no-specials \
          --delete --ignore-errors \
          "$HOST_TARGETS/$target/" "$MER_TARGETS/$target"
}

# create a unique device-id for the target
target_uuidgen() {
    local mytarget=$1

    if [[ -z $mytarget ]]; then
	echo >&2 "NOTICE: target_uuidgen: empty target name given"
	return 0
    fi

    echo >&2 "target_uuidgen: generating a unique id for target '$mytarget'"
    sb2 -t "$mytarget" -m sdk-install -R rm -f /var/lib/dbus/machine-id || return
    sb2 -t "$mytarget" -m sdk-install -R dbus-uuidgen --ensure
}

# add the MerSDK hostname to target's /etc/hosts
amend_target_hosts() {
    local mytarget=$1
    local myhostname=$(hostname)

    if [[ -z $mytarget ]]; then
	echo >&2 "NOTICE: amend_target_hosts: empty target name given"
	return 0
    fi

    sb2 -t "$mytarget" -m sdk-install -R sed -i "s,\(127.0.0.1.*\),\1 $myhostname," /etc/hosts
}

# Download and install a rootfs
install_target() {
    local skip_toolchain_check= tooling= tooling_url= toolchain= positional_args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            --jfdi)
	        # Sometimes you want to install without checking the toolchain - jfdi
                skip_toolchain_check=1
                ;;
            --tooling)
                tooling=${2:-}
                if [[ ! $tooling ]]; then
                    echo >&2 "$1: Argument expected"
                    usage
                    return 1
                fi
                shift
                ;;
            --tooling-url)
                tooling_url=${2:-}
                if [[ ! $tooling_url ]]; then
                    echo >&2 "$1: Argument expected"
                    usage
                    return 1
                fi
                shift
                ;;
            --toolchain)
                toolchain=${2:-}
                if [[ ! $toolchain ]]; then
                    echo >&2 "$1: Argument expected"
                    usage
                    return 1
                fi
                shift
                ;;
            -*)
                echo >&2 "unrecognized option '$1'"
                usage
                return 1
                ;;
            *)
                if [[ ${#positional_args[*]} -eq 2 ]]; then
                    echo >&2 "unexpected positional argument '$1'"
                    usage
                    return 1
                fi
                positional_args=(${positional_args[@]:+"${positional_args[@]}"} "$1")
                ;;
        esac
        shift
    done

    if [[ $tooling_url && ! $tooling ]]; then
        echo >&2 "'--tooling' required when '--tooling-url' is used"
        usage
        return 1
    fi

    if [[ $tooling && ! $tooling_url ]]; then
        assert_tooling_exists "$tooling" || return
    fi

    if [[ ${#positional_args[*]} -ne 2 ]]; then
        echo >&2 "<name> and <URL> expected"
        usage
        return 1
    fi

    local target=${positional_args[0]}
    local url=${positional_args[1]}

    assert_name_valid "$target" || return

    if target_exists "$target"; then
        echo >&2 "Target already exists '$target'"
        return 1
    fi

    # make sure the target dir exists
    if [[ ! -d $MER_TARGETS ]]; then
        sudo mkdir -p "$(dirname "$MER_TARGETS")" || return
        sudo install -d -o $(id -u) -g $(id -g) "$MER_TARGETS" || return
    fi

    local download_result= local_file= downloaded= tooling_installed=

    local succeeded=
    install_target_cleanup() (
        trap 'echo cleaning up...' INT TERM HUP
        if [[ $download_result ]]; then
            local local_file= downloaded=
            if unpack "$download_result" local_file downloaded && [[ $downloaded ]]; then
                rm -f "$local_file"
            fi
        fi
        if [[ ! $succeeded ]]; then
            rm -rf "$SBOX2DIR/$target"
            sudo rm -rf "$MER_TARGETS/$target"
            if [[ $INSIDE_VBOX ]]; then
                rm -rf "$HOST_TARGETS/$target"
            fi
            if [[ $tooling_installed ]]; then
                remove_tooling "$tooling"
            fi
        fi
    )
    trap 'install_target_cleanup; trap - RETURN' RETURN
    trap 'return 1' INT TERM HUP

    if [[ $tooling_url ]]; then
        if tooling_exists "$tooling"; then
            echo >&2 "Tooling '$tooling' already installed, skipping"
        else
            install_tooling "$tooling" "$tooling_url" || return
            tooling_installed=1
        fi
    fi

    download_result=$(download "$url" "$TMPDIR_DOWNLOADS" "$target") || return
    unpack "$download_result" local_file downloaded

    # Virtualbox shared folders don't work too well at the moment
    # Unpack targets to a private area within the VM
    sudo rm -rf "$MER_TARGETS/$target" || return
    sudo mkdir -p "$MER_TARGETS/$target" || return

    # only create HOST_TARGETS dirs if inside the VM
    if [[ $INSIDE_VBOX ]]; then
        mkdir -p "$HOST_TARGETS/$target" || return
    fi

    echo >&2
    echo >&2 "Unpacking target ..."
    if ! maybe_decompress_tarball "$local_file" | sudo tar -C "$MER_TARGETS/$target" -x; then
        if disk_full "$MER_TARGETS"; then
	    echo >&2 "Not enough disk space to unpack target image"
	else
	    echo >&2 "Could not unpack target image"
	fi
        return 1
    fi

    local target_release= tooling_release=
    target_release=$(ssu --root "$MER_TARGETS/$target" status |grep ^Release) || return

    if [[ $tooling ]]; then
        tooling_release=$(ssu --root "$MER_TOOLINGS/$tooling" status |grep ^Release) || return
        if [[ $tooling_release != $target_release ]]; then
            echo >&2 "WARNING: Tooling release '$tooling_release' does not match target release '$target_release'"
        fi
    else
        local available_tooling=
        for available_tooling in $(get_all_of_type_tooling); do
            tooling_release=$(ssu --root "$MER_TOOLINGS/$available_tooling" status |grep ^Release) || return
            if [[ $tooling_release == $target_release ]]; then
                tooling=$available_tooling
                break
            fi
        done

        if [[ ! $tooling ]]; then
            echo >&2 "No suitable tooling found for this target"
            return 1
        fi

        echo >&2 "Using '$tooling' tooling for this target"
    fi

    local target_arch=
    target_arch=$(ssu --root "$MER_TARGETS/$target" arch) || return
    if ! [[ $toolchain ]]; then
        toolchain="patterns-sailfish-sb2-$target_arch"
    fi

    if ! [[ $skip_toolchain_check ]]; then
        echo >&2 "Making sure the right toolchain exists in '$tooling' tooling"
        if ! ensure_installed "$tooling" "$toolchain"; then
            echo >&2 "Installing required toolchain in '$tooling' tooling: $toolchain"
            install_toolchain "$tooling" "$toolchain" || return
        fi
    fi

    sudo chown -R $(id -u):$(id -g) "$MER_TARGETS/$target" || return

    if [[ $INSIDE_VBOX ]]; then
        synchronise_target "$target"
        [[ $? -ne 0 ]] && echo >&2 "Rsync did not exactly run as intended, expect problems."
    fi

    echo >&2 "Setting up SB2"

    local transparency= compiler=
    case $target_arch in
        arm*)
            transparency="/usr/bin/qemu-arm-dynamic"
            compiler="/opt/cross/bin/${target_arch}-meego-linux-gnueabi-gcc"
	    ;;
        mipsel)
            transparency="/usr/bin/qemu-mipsel-dynamic"
	    compiler="/opt/cross/bin/mipsel-meego-linux-gnu-gcc"
	    ;;
        i486*)
	    compiler="/opt/cross/bin/i486-meego-linux-gnu-gcc"
	    ;;
    esac

    if [[ $INSIDE_CHROOT ]]; then
        getent passwd $(id -u) |fix_shell |sudo tee -a "$MER_TARGETS/$target/etc/passwd" >/dev/null
        getent group $(id -u) |sudo tee -a "$MER_TARGETS/$target/etc/group" >/dev/null
    fi

    (
        cd "$MER_TARGETS/$target" && sb2-init \
            -L "--sysroot=/" -C "--sysroot=/" ${transparency:+-c "$transparency"} \
            -m sdk-build -n -N -t "$MER_TOOLINGS/$tooling" "$target" "$MER_TOOLINGS/$tooling/$compiler"
    ) || return

    # make sure the created target gets a unique id
    target_uuidgen "$target" || return

    # fix target's /etc/hosts
    amend_target_hosts "$target" || return

    assert_target_exists "$target" || return

    if [[ $INSIDE_VBOX ]]; then
	echo >&2 "Notifying Qt Creator of new target"
        updateQtCreatorTargets --name "$target" --target-xml "$TARGETS_XML" || return
    fi

    if [[ $MODE == "$MODE_USER" ]]; then
        if [[ $INSIDE_VBOX ]]; then
            local size=$(sudo du --summarize --bytes "$MER_TARGETS/$target" |cut -f1)
            manage_user_targets_repository touch target "$target" "${size:-0}"
        fi
    else
        set_target_mode "$target" "$MODE"
    fi

    echo >&2 "Target '$target' now setup"
    succeeded=1
}

remove_target() {
    local target=$1
    assert_name_valid "$target" || return
    if [[ -d $SBOX2DIR/$target ]]; then
        local mode=$(get_target_mode "$target")
        if [[ $MODE != "$mode" ]]; then
            echo >&2 "The target '$target' can only be removed in the '$mode' mode."
            return 1
        fi

        rm -r "$SBOX2DIR/$target"
        sudo rm -rf "$MER_TARGETS/$target"
	if [[ $INSIDE_VBOX ]]; then
            rm -rf "$HOST_TARGETS/$target"
	    echo >&2 "Notifying Qt Creator of removed target"
	fi
    else
        echo >&2 "Note: target '$target' was not seen by sb2"
    fi

    if [[ $INSIDE_VBOX ]]; then
        # Notify Qt Creator always when we're in the VM to keep the
        # target information in sync
        updateQtCreatorTargets --delete --name "$target" --target-xml "$TARGETS_XML" || return
        if [[ $MODE == "$MODE_USER" ]]; then
            manage_user_targets_repository rm target "$target"
        fi
    fi
}

manage_targets() {
    if ! [[ ${1:-} ]]; then
        usage
        return 1
    fi

    case $1 in
	?(--)list ) shift
            list_targets "$@"
	    ;;
	?(--)upgradable ) shift
            object_upgradable target "$@"
	    ;;
	?(--)install ) shift
            install_target "$@"
	    ;;
	?(--)remove ) shift
	    remove_target "$@"
	    ;;
	?(--)refresh ) shift
            refresh_objects target "$@"
	    ;;
	?(--)update ) shift
            upgrade_object target "$@"
	    ;;
	?(--)sync ) shift
            local target=${1:-}
            assert_name_valid "$target" || return
	    if [[ ! $INSIDE_VBOX ]]; then
	        echo >&2 "This operation is only valid for SDK in VirtualBox"
                return 1
	    fi
            synchronise_target "$@" || return
            updateQtCreatorTargets --name "$target" --target-xml "$TARGETS_XML"
	    ;;
	?(--)import ) shift
            assert_name_valid "${1:-}" || return
	    if [[ ! $INSIDE_VBOX ]]; then
	        echo >&2 "This operation is only valid for SDK in VirtualBox"
                return 1
	    fi
	    import_target "$@"
	    ;;
	?(--)register ) shift
            register_object target "$@"
	    ;;
	* )
            echo >&2 "unrecognized option '$1'"
            usage
            return 1
	    ;;
    esac
}

################################################################
# SDK

get_sdk_version() {
    echo "Version not available"
}

sdk_status() {
    local err=0
    sdk_vbox_status || err=1
    return $err
}

sdk_vbox_status() {
    [[ $INSIDE_VBOX ]] || return 0
    local err=0

    systemctl --failed || err=1

    if ! sudo VBoxControl -nologo sharedfolder list | grep -q ' home$'; then
	echo "'home' shared folder is missing"
        err=1
    fi
    if ! sudo VBoxControl -nologo sharedfolder list | grep -q ' config$'; then
	echo "'config' shared folder is missing"
        err=1
    fi
    if ! sudo VBoxControl -nologo sharedfolder list | grep -q ' targets$'; then
	echo "'targets' shared folder is missing"
        err=1
    fi

    return $err
}

manage_sdk() {
    if ! [[ ${1:-} ]]; then
        usage
        return 1
    fi

    case $1 in
	?(--)version )
	    get_sdk_version
	    ;;
	?(--)status )
	    sdk_status
	    ;;
	?(--)upgradable ) shift
            object_upgradable sdk "$@"
	    ;;
	?(--)upgrade ) shift
            upgrade_object sdk "$@"
	    ;;
	?(--)refresh )
            refresh_objects sdk "$@"
	    ;;
	?(--)register ) shift
            register_object sdk "$@"
	    ;;
	* )
            echo >&2 "unrecognized option '$1'"
            usage
            return 1
	    ;;
    esac
}

################################################################
# utility

get_register_credentials() {
    local username= password= other=()

    while [[ ${1:-} ]]; do
        case $1 in
	    --user )
                [[ -n ${2:-} ]] || { usage; return 1; }
                username=$2
                shift 2
		;;
	    --password )
                [[ -n ${2:-} ]] || { usage; return 1; }
                password=$2
                shift 2
		;;
	    *)
		other=(${other[@]:+"${other[@]}"} "$1")
                shift
		;;
	esac
    done

    if [[ ! $username || ! $password ]] && ! tty --quiet; then
        echo >&2 "Missing --user and/or --password option"
        usage
        return 1
    fi

    while [[ ! $username ]]; do
        read -p "Username: " username
    done
    while [[ ! $password ]]; do
        read -p "Password: " -s password
        echo >&2
    done

    print_array "$username" "$password" "$(print_array ${other[@]:+"${other[@]}"})"
}

################

INSIDE_CHROOT=$([[ -e /etc/mer-sdk-chroot ]] && echo 1)
INSIDE_VBOX=$([[ -e /etc/mer-sdk-vbox ]] && echo 1)

# exactly one must be true
if [[ $INSIDE_CHROOT$INSIDE_VBOX != 1 ]]; then
    echo >&2 "Internal error: Failed to determine type of SDK installation"
    exit 1
fi

MER_TARGETS=/srv/mer/targets
MER_TOOLINGS=/srv/mer/toolings
HOST_TARGETS=/host_targets
SBOX2DIR=${HOME}/.scratchbox2
TARGETS_XML=${HOST_TARGETS}/targets.xml
USER_TARGETS_REPOSITORY=${HOST_TARGETS}/targets.repository

MODE_FILE=.sdk-manage.mode
MODE_USER=user
MODE_INSTALLER=installer
MODE=$MODE_USER

TMPDIR_DOWNLOADS=/var/tmp

################################################################
# Main

if [[ ${SDK_MANAGE_DEBUG:-} ]]; then
    sdk_manage_global_vars=
    sdk_manage_global_vars=$(compgen -v)
    check_leaked_local_vars() {
        local current=$(compgen -v)
        local ignored=(-e 'FUNCNAME' -e 'BASH_.*')
        current=$(grep -v --line-regexp "${ignored[@]}" <<<"$current")
        local leaked=$(join -v 2 <(echo "$sdk_manage_global_vars") <(echo "$current"))
        if [[ $leaked ]]; then
            echo >&2 "DEBUG: These variables should be declared local to the functions they originated from: $leaked"
        else
            echo >&2 "DEBUG: No local variable leaked"
        fi
    }
    trap check_leaked_local_vars EXIT
fi

if [[ ${FLOCKER:-} != $0 ]]; then
    if ! flock -en "$0" true; then
        echo >&2 "sdk-manage: acquiring lock..."
    fi
    exec env FLOCKER="$0" flock -e "$0" "$0" "$@" || :
fi

if ! [[ ${1:-} ]]; then
    usage
    exit 1
fi

while (( $# > 0)); do
    case $1 in
        -m|--mode)
            case ${2:-} in
                "$MODE_USER"|"$MODE_INSTALLER")
                    MODE=$2
                    ;;
                '')
                    echo >&2 "argument expected: '$1'"
                    usage
                    exit 1
                    ;;
                *)
                    echo >&2 "not a valid mode: '$2'"
                    usage
                    exit 1
                    ;;
            esac
            shift
            ;;
        --version)
            echo "$0, version VERSION_FROM_SPEC"
            exit 0
            ;;
        -h|?(--)help)
            help
            exit 0
            ;;
        * )
            break
            ;;
    esac
    shift
done

case $1 in
    ?(--)tooling ) shift
        manage_toolings "$@"
	;;
    ?(--)target ) shift
	manage_targets "$@"
	;;
    ?(--)toolchain ) shift
	manage_toolchains "$@"
	;;
    ?(--)devel?(pkg) ) shift
	manage_develpkgs "$@"
	;;
    ?(--)sdk ) shift
	manage_sdk "$@"
	;;
    ?(--)refresh-all ) shift
        manage_targets refresh --all || exit
        manage_toolings refresh --all || exit
	manage_sdk refresh
	;;
    ?(--)register-all ) shift
        register_all "$@"
        ;;
    * )
        echo >&2 "unrecognized option '$1'"
        usage
        exit 1
	;;
esac
