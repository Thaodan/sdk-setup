#!/bin/bash
#
# sdk-assitant is a helper script for simple scratchbox2 management tasks
# in MerSDK
#
# Copyright (C) 2014-2017 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jolla.com>
# All rights reserved.
#
# You may use this file under the terms of BSD license as follows:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the Jolla Ltd nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

set -o nounset

fail() {
    echo "FAIL: $@"
    exit 1
}

# dry run function
_() {
    [[ -n $OPT_DRY_RUN ]] && echo "$@" || eval $@
}

usage() {
    cat <<EOF
SDK assistant script

Usage:
    $(basename $0) [tooling|target] create [OPTION] <name> <URL>
                            : create a new sb2 tooling or target.

    $(basename $0) [tooling|target] remove <name>
                            : remove the given sb2 tooling or target

    $(basename $0) [tooling|target] list
                            : list available sb2 toolings and/or targets

Options:
    <name>                  : name of the sb2 tooling or target
    <URL>                   : a tarball URL or a local file
    -y | --non-interactive  : do not ask questions
    -z | --dry-run          : do nothing, just print out what would happen
    -h | --help             : show this help

EOF

    # exit if any argument is given
    [[ -n "$1" ]] && exit 1
}

guess_type() (
    local url=$1

    shopt -s nocasematch
    case $url in
        *target*) echo target;;
        *tooling*) echo tooling;;
        *) return 1;;
    esac
)

list() {
    local type=${1:-}
    if [[ $type ]]; then
        sdk-manage --"$type" --list
    else
        echo "Toolings:"
        sdk-manage --tooling --list |sed 's/^/ /'
        echo "Targets:"
        # FIXME: targets are listed all on one line
        sdk-manage --target --list |tr ' ' '\n' |sed 's/^/ /'
    fi
}

have() {
    local type=$1
    local name=$2
    # FIXME: targets are listed all on one line
    sdk-manage --"$type" --list |tr ' ' '\n' |grep -q -F --line-regexp "$name"
}

OPT_CREATE=
OPT_DRY_RUN=
OPT_NAME=
OPT_REMOVE=
OPT_TYPE=
OPT_URL=
OPT_YES=

# handle commandline options
while [[ ${1:-} ]]; do
    case "$1" in
        -y | --non-interactive ) shift
            OPT_YES=1
            ;;
        -z | --dry-run ) shift
            OPT_DRY_RUN=1
            ;;
        -h | --help ) shift
            usage quit
            ;;
        tooling|target )
            OPT_TYPE=$1
            shift
            ;;
        create ) shift
            OPT_CREATE=1
            ;;
        remove ) shift
            OPT_REMOVE=1
            OPT_NAME=$1; shift
            [[ $OPT_NAME ]] || fail "remove: ${OPT_TYPE:+$OPT_TYPE }name required"
            ;;
        list ) shift
            # list requested, just do it
            list "$OPT_TYPE"
            exit $?
            ;;
        -* )
            fail "unknown option $1"
            ;;
        * )
            if [[ $OPT_CREATE ]]; then
                OPT_NAME=$1; shift
                OPT_URL=$1; shift
            fi
            [[ $# -eq 0 ]] || fail "$1: unexpected argument"
            ;;
    esac
done

if [[ $EUID -eq 0 ]]; then
    fail "$(basename $0) must not be run as root."
fi

# if not list, at least create or remove required
[[ $OPT_CREATE ]] && [[ $OPT_REMOVE ]] && usage quit

# cannot be both create and remove
[[ ! $OPT_CREATE ]] && [[ ! $OPT_REMOVE ]] && usage quit

if [[ $OPT_CREATE ]]; then
    if [[ ! $OPT_NAME ]] || [[ ! $OPT_URL ]]; then
        fail "create: ${OPT_TYPE:+$OPT_TYPE }<name> and <URL> required"
    fi

    if [[ ! $OPT_TYPE ]]; then
        if ! OPT_TYPE=$(guess_type "$OPT_URL"); then
            fail "Failed to guess type of tarball. Please specify either 'tooling' or 'target' on command line."
        fi
    fi

    if have "$OPT_TYPE" "$OPT_NAME"; then
        fail "$OPT_NAME: $OPT_TYPE already exists"
    fi

    if [[ ! ($OPT_URL =~ ^https?://) && ! -f ${OPT_URL#file://} ]]; then
        fail "$OPT_URL: no such file"
    fi

    cat <<EOF
Creating $OPT_TYPE [$OPT_NAME]
Using tarball [$OPT_URL]
EOF
fi

if [[ $OPT_REMOVE ]]; then
    if [[ ! $OPT_TYPE ]]; then
        if have tooling "$OPT_NAME"; then
            OPT_TYPE=tooling
        fi
        if have target "$OPT_NAME"; then
            if [[ $OPT_TYPE ]]; then
                fail "$OPT_NAME: Ambiguous. Please specify either 'tooling' or 'target' on command line."
            fi
            OPT_TYPE=target
        fi
        if [[ ! $OPT_TYPE ]]; then
            fail "$OPT_NAME: No such tooling or target"
        fi
    fi

    echo "Going to remove the $OPT_TYPE [$OPT_NAME]"
fi

[[ $OPT_DRY_RUN ]] && echo "[only print out what would be done]"

# confirm
if [[ -z $OPT_YES ]]; then
    while true; do
    read -p "Do you want to continue? (y/n) " answer
    case $answer in
        [Yy]*)
        break ;;
        [Nn]*)
        echo "Ok, exiting"
        exit 0
        ;;
        *)
        echo "Please answer yes or no."
        ;;
    esac
    done
fi

if [[ $OPT_CREATE ]]; then
    _ sdk-manage --"$OPT_TYPE" --install "$OPT_NAME" "$OPT_URL"
    exit $?
fi

if [[ $OPT_REMOVE ]]; then
    _ sdk-manage --"$OPT_TYPE" --remove "$OPT_NAME"
    exit $?
fi


# For Emacs:
# Local Variables:
# indent-tabs-mode:nil
# tab-width:4
# mode: sh
# End:
# For VIM:
# vim:set softtabstop=4 shiftwidth=4 tabstop=4 expandtab:
