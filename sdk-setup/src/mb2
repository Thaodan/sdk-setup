#!/bin/bash
#
# Copyright (C) 2013 - 2016 Jolla Ltd.
# Contact: David Greaves <david.greaves@jollamobile.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

short_usage() {
    cat <<EOF
usage: $ME [-t <target>] [-s <specfile>] [-d <device>] [-p <projectdir>]
           [-f <folder>] [-i] [-P] [-x] [-c[=<args>]]
           build [-p] [-d] [-j <n>] [<args>] | qmake [<args>] | make [<args>] | ssh <args>
           install [<args>] | installdeps <args> | rpm [<args>] | deploy <args>
           prep | apply [-R] | run <args>
       $ME --version
       $ME --help
EOF
    # exit if any argument is given
    [[ -n "$1" ]] && exit 1
}

usage() {
    short_usage
    cat <<EOF

  Executes a subset of build commands in the context of an rpmbuild.
  Typically called from QtCreator to perform qmake/make phases of a project.
  Note that any other build steps in the .spec file will also be run.

  <specfile> will be looked for in the current rpm/ dir. If there is
  more than one it must be provided.

  CWD is used as a base dir for installroot/ and RPMS/ to allow for
  shadowbuilds

  $ME is aware of spectacle and will update the spec file if there is
  an obvious yaml file which is newer.

  If a file exists with '.changes' extension, otherwise matching the
  spec file name, the effect will be the same as having a %changelog
  section in the spec file.  If a file with '.changes.run' extension is
  found instead, this file will be executed and its output treated as
  the actual changelog.

  $ME prep           : runs rpmbuild for %prep phase of the spec file.

  $ME build [-p|--doprep] [-d|--enable-debug] [-j <n>] [<args>]
                     : runs rpmbuild for the given spec file in the
                       given sb2 target. Produces an rpm package.
                     : -p     run %prep phase as well when building
                     : -d     enable debug build
                     : -j <n> use only 'n' CPUs to build
                     : can use -s -t -p -i -x -c

  $ME qmake [<args>] : runs qmake in the 'build' phase
                       Note that this also verifies target
                       build dependencies are up to date
                     : can use -s -t -p  

  $ME make [<args>]  : run make in the 'build' phase
                     : can use -s -t -p

  $ME deploy --zypper|--pkcon|--rsync|--sdk
                     : runs the install or rpm-creation phase and then
                       copies/installs the relevant files to the device
                     : can use -s -t -p -d -i -f -x -c

  $ME run|ssh [<args>] : runs a command (on device if --device given);
                         intended for running gdb and a gdb server
                     : can use -s -t -p -d

  $ME install [<args>] : runs the 'install' phase to install to $buildroot
                     : can use -s -t -p

  $ME installdeps [<args>] : refresh the zypper cache of the given target and
                             if required installs build-dependencies
                     : can use -s -t -p

  $ME rpm [<args>]   : runs the install & rpm-creation phases
                     : can use -s -t -p -i -x -c

  $ME apply [-R]     : applies all patches defined in spec from rpm directory
                     : to the source tree, or if detected, submodule
                     : source tree
                     : -R    reverse apply patches (patch -R)
                     : can use -m

  -i | --increment     : increment release number in spec file
  -t | --target        : specify the sb2 target to use
  -d | --device        : specify the device
  -p | --projectdir    : when running shadow build/deploy from another dir
  -s | --specfile      : if the specfile is not in rpm/*.spec and cannot be found using -p
  -f | --shared-folder : the folder where QtCreator shares devices.xml and ssh keys
                         this option is useful if deploy option is used outside of virtual
                         machine
  -P | --pedantic      : do extra checks
  -x | --fix-version   : use the latest tag from the current git branch as package version
  -c[=<args>] | --git-change-log[=<args>]
                       : include change log generated from Git history with
                         'git-change-log' command, forwarding any <args>.
                         This option is not intended for regular use - create a
                         script file named after the spec file but with
                         '.changes.run' extension to instruct $ME to generate
                         changelog with 'git-change-log <args>' instead.
  -m | --submodule     : use specified directory as submodule when applying patches

EOF
}

notice() {
    echo "NOTICE: $*" >&2
}

fatal() {
    echo "Fatal: $*" >&2
    exit 1
}

check_spec_supports_qtc_silent() {
    grep "define qtc_qmake" "$OPT_SPEC" >/dev/null 2>&1
}

check_spec_supports_qtc() {
    if ! check_spec_supports_qtc_silent; then
        notice "This specfile does not have the qtc_* macros defined"
    fi
}

try_to_make_spec() { # Tries to create a missing spec
    [[ -f "$1" ]] && return # It's not missing
    local yaml="${1%.spec}.yaml"
    [[ -f "$yaml" ]] || return # No yaml
    ANSI_COLORS_DISABLED=1 specify -n -N "$yaml" || fatal "unable to convert yaml to spec"
}

try_to_make_spec_from_yaml() {
    # Tries to create a missing spec from a given yaml
    try_to_make_spec "${1%.yaml}.spec"
}

try_to_make_changelog() {
    local changes_file=${OPT_SPEC%.spec}.changes
    local changes_run_file=${OPT_SPEC%.spec}.changes.run

    if [[ $OPT_GIT_CHANGE_LOG ]]; then
        notice "Auto generating changelog from Git history ..."
        echo "%changelog"
        git-change-log $OPT_GIT_CHANGE_LOG_ARGS
    elif [[ -f $changes_file ]]; then
        notice "Appending changelog entries to spec ..."
        echo "%changelog"
        cat $changes_file
    elif [[ -f $changes_run_file ]]; then
        notice "Generating changelog entries with $changes_run_file ..."
        local runner=
        # In build VM the shared filesystem is noexec
        if ! [[ -x $changes_run_file ]]; then
            if [[ $(head -c 3 <$changes_run_file |cat -v) == '#!/' ]]; then
                runner=$(sed -n '1s/^#!//p' $changes_run_file)
            else
                fatal "Not executable: $changes_run_file"
            fi
        fi
        echo "%changelog"
        $runner $changes_run_file || fatal "unable to generate changelog entries"
    fi
}

ensure_spec_newer_than_yaml() {
    local yaml="${OPT_SPEC%.spec}.yaml"
    if [[ -f "$yaml" ]] && [[ "$yaml" -nt "$OPT_SPEC" ]]; then # -nt is newer than
        ANSI_COLORS_DISABLED=1 specify -n -N "$yaml" || fatal "unable to convert yaml to spec"
    fi

    # it's ok also not to have a yaml
}

verify_target_dependencies() {
    sb2 -t "$OPT_TARGET" rpmspec --query --buildrequires "$OPT_SPEC" | \
        xargs --no-run-if-empty sb2 -t "$OPT_TARGET" -m sdk-install -R zypper --quiet --non-interactive in
}

get_spec_tag() {
    rpmspec --query --srpm --queryformat="$1" "$OPT_SPEC"
}

fix_package_version() {
    [[ ! $OPT_FIX_VERSION ]] && return

    local tag=$(git describe --tags --abbrev=0 2>/dev/null)
    if [[ -n $tag ]]; then
        # tagver piece copied from tar_git service
        if [[ $(echo $tag | grep "/") ]] ; then
            # allow tags to have a prefix to allow vendor marking
            tagver=$(echo $tag | cut -f2 -d'/')
        # some people like to prefix versions with a v
        elif [[ $(echo $tag | grep -Po "^v") ]]; then
            tagver=$(echo $tag | cut -f2 -d'v')
        else
            tagver=$tag
        fi
        # '-' is not an allowed character in the version field
        sed -i "s,^Version:.*,Version: ${tagver//-/+}," "$1"
    fi
}

# Helper to read XML
read_dom () {
    local IFS=\>
    read -d \< ENTITY CONTENT
    local RET=$?
    TAG_NAME=${ENTITY%% *}
    ATTRIBUTES=${ENTITY#* }
    return $RET
}

# This slurps the XML and converts tags like <subnet> to $device_subnet
# Also sets device_name and device_type from the attributes
get_device() {
    local FOUND_DEVICE=
    local IN_DEVICE=
    local maintag=
    while read_dom; do
        case $TAG_NAME in
            device )
                maintag=$TAG_NAME
                eval local $ATTRIBUTES
                if [[ "$name" == "$1" ]] ; then
                    FOUND_DEVICE=1
                    IN_DEVICE=1
                    device_name="$name"
                    device_type="$type"
                else
                    IN_DEVICE=
                fi
                ;;
            engine )
                maintag=$TAG_NAME
                eval local $ATTRIBUTES
                ;;
            mac|index|subnet|ip|sshkeypath )
                # Don't process and store nested tags if we're in
                # device with wrong name
                if [[ "$maintag" == "device" ]] && [[ $IN_DEVICE != 1 ]]; then
                    continue
                fi
                eval ${maintag}_$TAG_NAME=\"$CONTENT\"
                ;;
        esac
    done
    # Set this up as it's useful
    if [[ "$device_subnet" ]]; then
        device_ip="$device_subnet".$device_index
    fi
    if [[ "$FOUND_DEVICE" == 1 ]]; then return 0; else return 1; fi
}

rsync_as() {
    local user="$1";shift
    local key=$(get_shared_dir)/${device_sshkeypath}/$user
    [[ -f "$key" ]] || fatal "No key for user $user on $device_name given in devices.xml (rsync $key)"
    RSYNC_RSH="ssh -F /etc/ssh/ssh_config.sdk -l $user -i \"$key\"" rsync "$@"
}

ssh_as() {
    local user="$1";shift
    local key=$(get_shared_dir)/${device_sshkeypath}/$user
    [[ -f "$key" ]] || fatal "No key for user $user on $device_name given in devices.xml ($key)"
    ssh -F /etc/ssh/ssh_config.sdk -i "$key" -l $user $device_ip "$(quote "$@")"
}

cd_to_spec_setup_dir() {
    _basedir="$PWD"

    # avoid spawning another process for | cut -s -f2 -d '/'
    local setup_dir=$(grep -Po '%setup.*-n.*' "$OPT_SPEC")
    # if setup_dir has '/' return the part after it
    setup_dir=${setup_dir/#*\//}
    # if it did not have a '/' then we got the original match => erase it
    setup_dir=${setup_dir/#%setup*/}

    if [[ -n "$setup_dir" ]]; then
    # in case we got a spec %{tag} out of this, try to expand it
    setup_dir=$(get_spec_tag "$setup_dir")
    cd "$setup_dir"
    fi
}

# handle release tags with format "x" or "x.y", where x and y are
# numbers, leave others untouched
#  get tag
#  check if it has x.y
#  if it is x.y get y and check if y is number
#  if y is number => increment
#  if it only is x check if x is number
#  if x is number => increment
#  else leave untouched
increment_build_number() {
    [[ $OPT_INC_BUILD_NUMBER -eq 0 ]] && return

    local release=$(get_spec_tag "%{release}")
    local x=$(echo $release | cut -f 1 -d .)
    local y=$(echo $release | cut -s -f 2 -d .)
    local z=$(echo $release | cut -s -f 3- -d .)

    # more than one dot found => don't touch
    [[ -n "$z" ]] && return

    if [[ -n "$y" ]]; then
        if [[ $y =~ ^-?[0-9]+$ ]]; then
            let new_release=$y+1
            echo "Incrementing release: $x.$y -> $x.$new_release"
            sed -i "s/^Release:.*/Release: $x.$new_release/" "$OPT_SPEC"
            return
        else
            # non-numeric after dot => don't touch
            return
        fi
    fi

    if [[ -n "$x" ]]; then
        if [[ $x =~ ^-?[0-9]+$ ]]; then
            let new_release=$x+1
            echo "Incrementing release: $x -> $new_release"
            sed -i "s/^Release:.*/Release: $new_release/" "$OPT_SPEC"
            return
        fi
    fi
}

quote() {
    [[ $# -gt 0 ]] && printf "%q " "$@" |sed 's/ $//'
}

rpm_quote() {
    quote "$@" |sed 's/\\/&&/g'
}

run_installdeps() {
    # Refresh repos before installing dependencies
    sb2 -t "$target" -m sdk-install -R zypper --non-interactive ref
    verify_target_dependencies
}

run_apply() {
    rpm_dir="$(dirname "$OPT_SPEC")"
    submodule=""
    if [ ! -z "$OPT_SUBMODULE" ]; then
        submodule="$OPT_SUBMODULE"
    else
        # try to detect submodule
        submodule="$(git submodule | awk '{print $2}')"
    fi

    if [ ! -z "$submodule" ]; then
        if [ ! -d "$submodule" ]; then
            echo "Submodule with directory $submodule not found. Define with -m"
            exit 1
        fi
        pushd "$submodule" >/dev/null
    fi

    reverse="cat"
    if [ "$APPLY_REVERSE" -eq 1 ]; then
        reverse="tac"
    fi
    for p in $(sed -e '/^%patch/!d' -e 's/^%patch\([0-9]*\).*/\1/' "$OPT_SPEC" | $reverse); do
        op="$(grep "^%patch${p}" "$OPT_SPEC" | awk '{print $2}')"
        patch_file="$(grep "^Patch$p:" "$OPT_SPEC" | awk '{print $2}')"
        if [ "$APPLY_REVERSE" -eq 1 ]; then
            echo "Reversing $patch_file"
            patch -R $op < "$rpm_dir/$patch_file"
        else
            echo "Applying $patch_file"
            patch $op < "$rpm_dir/$patch_file"
        fi
    done

    if [ ! -z "$submodule" ]; then
        popd >/dev/null
    fi
}

run_build() {
    # intended to provide mb build behaviour
    verify_target_dependencies

    increment_build_number;
    local tmp_spec="$OPT_SPEC.$$"
    if [[ ! $BUILD_PREP ]]; then
        sed -e '/^%patch/d' "$OPT_SPEC" > "$tmp_spec"
    else
        cp "$OPT_SPEC" "$tmp_spec"
    fi

    try_to_make_changelog >> "$tmp_spec"

    # get rid of potential windows linefeeds
    sed -i "s/\x0D$//g" "$tmp_spec"

    fix_package_version "$tmp_spec"

    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}
    (
        cd_to_spec_setup_dir;
        rm -f "$_basedir/RPMS/"*.rpm;
        sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
            "${BUILD_DEBUG[@]}" \
            --define "_smp_mflags -j$(rpm_quote "$BUILD_JOBS")" \
            --define "_rpmdir $_basedir/RPMS " \
            --define "_sourcedir $_basedir/rpm " \
            --define "_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm " \
            --buildroot="$buildroot" \
            "${BUILD_PREP[@]}" \
            --dobuild \
            --doinstall \
            --dobinary \
            --docheck \
            "$tmp_spec" \
            "$@"
    )
    local rc=$?
    rm -f "$tmp_spec"
    return $rc
}

run_prep() {
    verify_target_dependencies

    increment_build_number;
    local tmp_spec="$OPT_SPEC.$$"
    # TODO maybe add toggle here for disabling patch applying?
    cp "$OPT_SPEC" "$tmp_spec"

    # get rid of potential windows linefeeds
    sed -i "s/\x0D$//g" "$tmp_spec"

    fix_package_version "$tmp_spec"

    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}
    (
        cd_to_spec_setup_dir;
        rm -f "$_basedir/RPMS/"*.rpm;
        sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
            "${BUILD_DEBUG[@]}" \
            --define "_smp_mflags -j$BUILD_JOBS" \
            --define "_rpmdir $_basedir/RPMS " \
            --define "_sourcedir $_basedir/rpm " \
            --define "_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm " \
            --buildroot="$buildroot" \
            --doprep \
            "$tmp_spec"
    )
    local rc=$?
    rm -f "$tmp_spec"
    return $rc
}

run_qmake() {
    if [[ "$OPT_SPEC" ]] && check_spec_supports_qtc_silent; then
        local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
        build_tgt=${build_tgt%-gnueabi}

        local tmp_spec="$OPT_SPEC.$$"
        cp -a "$OPT_SPEC" "$tmp_spec"

        # get rid of potential windows linefeeds
        sed -i "s/\x0D$//g" "$tmp_spec"

        # This is a good time to verify the target dependencies as per mb
        verify_target_dependencies
        (
            cd_to_spec_setup_dir;
            sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
                --dobuild \
                --define "noecho 1 " \
                --define "qtc_builddir $_basedir" \
                --define "qtc_make true ignoring make" \
                --define "qtc_qmake5 %qmake5 $(rpm_quote "$@") " \
                --define "qtc_qmake %qmake $(rpm_quote "$@") " \
                "$tmp_spec"
        )
        local rc=$?
        rm -f "$tmp_spec"
        return $rc
    else
        sb2 -t $OPT_TARGET qmake "$@"
    fi
}

run_make() {
    if [[ "$OPT_SPEC" ]] && check_spec_supports_qtc_silent; then

        local tmp_spec="$OPT_SPEC.$$"
        cp -a "$OPT_SPEC" "$tmp_spec"

        # get rid of potential windows linefeeds
        sed -i "s/\x0D$//g" "$tmp_spec"

        local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
        build_tgt=${build_tgt%-gnueabi}
        (
            cd_to_spec_setup_dir;
            sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
                --dobuild \
                --define "noecho 1 " \
                --define "qtc_builddir $_basedir" \
                --define "qtc_qmake5 true ignoring qmake" \
                --define "qtc_qmake true ignoring qmake" \
                --define "qtc_make make %{?_smp_mflags} $(rpm_quote "$@") " \
                "$tmp_spec"
        )
        local rc=$?
        rm -f "$tmp_spec"
        return $rc
    else
        sb2 -t $OPT_TARGET make "$@"
    fi
}

run_install() {
    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}

    local tmp_spec="$OPT_SPEC.$$"
    cp -a "$OPT_SPEC" "$tmp_spec"

    # get rid of potential windows linefeeds
    sed -i "s/\x0D$//g" "$tmp_spec"

    # Install to buildroot which should be rsync'ed to /opt/sdk/$package on device
    (
        cd_to_spec_setup_dir;
        sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
            --define "noecho 1 " \
            --define "qtc_builddir $_basedir" \
            --define "_sourcedir $_basedir/rpm " \
            --define "_skip_install_processing 1" \
            --buildroot="$buildroot" \
            --doinstall \
            "$tmp_spec"
    )
    local rc=$?
    rm -f "$tmp_spec"
    return $rc
}

run_rpm() {
    local build_tgt=$(sb2 -t $OPT_TARGET gcc -dumpmachine)
    build_tgt=${build_tgt%-gnueabi}

    local tmp_spec="$OPT_SPEC.$$"
    cp -a "$OPT_SPEC" "$tmp_spec"

    try_to_make_changelog >> "$tmp_spec"

    # get rid of potential windows linefeeds
    sed -i "s/\x0D$//g" "$tmp_spec"

    fix_package_version "$tmp_spec"

    (
        increment_build_number;
        cd_to_spec_setup_dir;
        rm -f "$_basedir/RPMS/"*.rpm;
        sb2 -t $OPT_TARGET rpmbuild --build-in-place --target=$build_tgt \
            --define "noecho 1 " \
            --define "qtc_builddir $_basedir" \
            --define "_rpmdir $_basedir/RPMS " \
            --define "_sourcedir $_basedir/rpm " \
            --define "_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm " \
            --buildroot="$buildroot" \
            --doinstall \
            --dobinary \
            --docheck \
            "$tmp_spec"
    )
    local rc=$?
    rm -f "$tmp_spec"
    return $rc
}

run_deploy() {
    [[ "$device_type" ]] || fatal "deploy must have a valid --device"
    local fail_text="deploy must use one of --pkcon, --rsync , --sdk or --zypper"
    [[ -z ${1:-} ]] && fatal $fail_text

    local retcode=0

    while [[ $1 ]]; do
        case "$1" in
            "--sdk" | "--pkcon" )
                local method;
                if [[ "$1" == "--sdk" ]]; then
                    method="sdk-deploy-rpm"
                else
                    method="pkcon --plain --noninteractive install-local"
                fi
                shift
                run_rpm
                [[ $? -ne 0 ]] && return 1
                rpms=$(find RPMS -name '*.rpm' -a ! -name '*-debug*.rpm')
                rsync_as $deviceuser -av ${rpms} $device_ip:/home/$deviceuser/RPMS/
                [[ $? -ne 0 ]] && return 1
                ssh_as $deviceuser $method ${rpms}
                retcode=$?
                ssh_as $deviceuser rm -f ${rpms}
                ;;
            "--zypper" ) shift
                run_rpm
                [[ $? -ne 0 ]] && return 1
                rpms=$(find RPMS -name '*.rpm' -a ! -name '*-debug*.rpm')
                rsync_as root -av ${rpms} $device_ip:/root/RPMS/
                [[ $? -ne 0 ]] && return 1
                ssh_as root zypper --non-interactive --quiet in -f ${rpms}
                retcode=$?
                ssh_as root rm -f ${rpms}
                ;;
            "--rsync" ) shift
                run_install
                [[ $? -ne 0 ]] && return 1
                name=$(get_spec_tag "%{name}")
                rsync_as $deviceuser -av ${buildroot}/. $device_ip:/opt/sdk/$name
                retcode=$?
                ;;
            *)
                fatal $fail_text ;;
        esac
    done

    [[ $retcode -eq 0 ]] || { echo "Deploy failed"; return 1; }
}

get_shared_dir() {
    echo "$OPT_SHARED_DIR"
}

# this is same as basename $0
ME=${0/#*\//}

################################################################################
if [[ $1 != --self-test ]]; then  ###  M A I N  EXECUTION BEGINS HERE  #########
################################################################################

# option variables
OPT_SPEC=
OPT_TARGET=
OPT_DEVICE=
OPT_PKGDIR="./rpm"
OPT_PROJDIR=
OPT_NEEDSPEC=
OPT_PEDANTIC=0
OPT_GIT_CHANGE_LOG=
OPT_GIT_CHANGE_LOG_ARGS=
OPT_SHARED_DIR=/etc/mersdk/share
OPT_INC_BUILD_NUMBER=0
OPT_SUBMODULE=""
deviceuser=nemo

# Virtualbox environment will install in this hardcoded location
if [[ -f /etc/mer-sdk-vbox ]]; then
    buildroot=/home/deploy/installroot
else
    buildroot="$PWD/installroot"
fi

while [[ "$1" ]]; do
    # only set variables in this loop
    case "$1" in
        "-t" | "--target") shift
            OPT_TARGET="$1"; shift
            ;;
        "-f" | "--shared-folder") shift
            OPT_SHARED_DIR="$1"; shift
            ;;
        "-d" | "--device") shift
            OPT_DEVICE="$1"; shift
            ;;
        "-p" | "--projectdir") shift
            OPT_PROJDIR="$1"; shift
            OPT_PKGDIR="$OPT_PROJDIR"/rpm
            [[ -d "$OPT_PROJDIR" ]] || fatal "'$OPT_PROJDIR' is not a directory"
            ;;
        "-s" | "--specfile" ) shift
            OPT_SPEC="$1"; shift
            ;;
        "-i" | "--increment" ) shift
            OPT_INC_BUILD_NUMBER=1
            ;;
        "-P" | "--pedantic" ) shift
            OPT_PEDANTIC=1
            ;;
        "-x" | "--fix-version" ) shift
            OPT_FIX_VERSION=1
            ;;
        "-c" | "--git-change-log" ) shift
            OPT_GIT_CHANGE_LOG=1
            ;;
        "-c="* )
            OPT_GIT_CHANGE_LOG=1
            OPT_GIT_CHANGE_LOG_ARGS="${1#-c=}"
            shift
            ;;
        "--git-change-log="* )
            OPT_GIT_CHANGE_LOG=1
            OPT_GIT_CHANGE_LOG_ARGS="${1#--git-change-log=}"
            shift
            ;;
        "-m" | "--submodule" ) shift
            OPT_SUBMODULE="$1"; shift
            ;;
        install | rpm | deploy | build | installdeps | apply | prep )
            OPT_NEEDSPEC=1;
            break
            ;;
        qmake | make | run | ssh )
            break
            ;;
        --version )
            echo "$ME, version VERSION_FROM_SPEC"
            exit 0
            ;;
        --help )
            usage
            exit 0
            ;;
        *)
            short_usage quit
            ;;
    esac
done

if [[ -n "$OPT_SPEC" ]]; then
    try_to_make_spec "$OPT_SPEC"
    [[ -f "$OPT_SPEC" ]] || fatal "'$OPT_SPEC' doesn't exist (and could not be made from a yaml)"
fi

if [[ -n "$OPT_DEVICE" ]]; then
    [[ -f $(get_shared_dir)/devices.xml ]] || fatal "Unable to open $(get_shared_dir)/devices.xml"
    get_device "$OPT_DEVICE" < $(get_shared_dir)/devices.xml || fatal "'$OPT_DEVICE' not found in devices.xml"
fi

if [[ ! "$OPT_TARGET" ]]; then
    if [[ -f ~/.scratchbox2/config ]]; then
        . ~/.scratchbox2/config
        OPT_TARGET=$DEFAULT_TARGET
    fi
    [[ "$OPT_TARGET" ]] || fatal "You must specify an sb2 target or have a default configured"
fi

[[ -d ~/.scratchbox2/$OPT_TARGET ]] || fatal "$OPT_TARGET is an invalid sb2 target"

# spec rules are complex:
#  a .spec is required for some but not all operations
#  if -s is given then
#    if it does not exist then specify tries to make it
#    if it exists it will be used
#  if there is a rpm/*.spec then that is used
#  if there is a rpm/*.yaml then a spec is made and used

if [[ ! "$OPT_SPEC" ]]; then
    # set nullglob on so that the shell glob expansions will return
    # empty if files are not found
    shopt -s nullglob
    spec_files=("$OPT_PKGDIR"/*.spec)
    numspec=${#spec_files[@]}
    if [[ $numspec -gt 1 ]]; then
        [[ $OPT_NEEDSPEC ]] && fatal "Too many spec files - please use -s to identify which one to use"
        echo "Too many spec files - not using any. Use -s to identify a specific one"
        # OPT_SPEC is not set
    fi

    if [[ $numspec -eq 0 ]]; then
        # No spec, try to find a yaml
        yaml_files=("$OPT_PKGDIR"/*.yaml)
        numyaml=${#yaml_files[@]}
        if [[ $numyaml -eq 1 ]]; then
            theyaml=("$OPT_PKGDIR"/*.yaml)
            try_to_make_spec_from_yaml "${theyaml[0]}"
            spec_files=("$OPT_PKGDIR"/*.spec)
            numspec=${#spec_files[@]}
        else
            [[ $OPT_NEEDSPEC ]] && fatal "No spec file found in '$OPT_PKGDIR/' and couldn't make one from a yaml #1"
        fi
    fi

    if [[ $numspec -eq 1 ]]; then
        thespec=("$OPT_PKGDIR"/*.spec)
        OPT_SPEC="${thespec[0]}"
    else
        # this is because we did try_to_make_spec_from_yaml and failed
        [[ $OPT_NEEDSPEC ]] && fatal "No spec file found in '$OPT_PKGDIR/' and couldn't make one from a yaml #2"
    fi

    # unset nullglob so that any further globbing works normally
    shopt -u nullglob
fi

# Now if there is a spec given, make sure it is up-to-date
if [[ "$OPT_SPEC" ]]; then
    # turn 'OPT_SPEC' into an absolute path
    OPT_SPEC=$(readlink -f "$OPT_SPEC")
    ensure_spec_newer_than_yaml
fi

case "$1" in
    qmake | make | install | rpm | deploy | prep )
        cmd=run_$1
        if [[ "$OPT_PEDANTIC" -eq 1 && "$OPT_SPEC" ]]; then
            check_spec_supports_qtc
        fi
        shift
        ;;
    apply )
        cmd=run_$1; shift
        APPLY_REVERSE=0
        while [[ "$1" ]]; do
            case "$1" in
                -R) shift
                    APPLY_REVERSE=1 ;;
                *)
                    short_usage quit
                    ;;
            esac
        done
        ;;
    build | installdeps )
        cmd=run_$1; shift
        BUILD_DEBUG=(--define "debug_package %{nil} ")
        BUILD_JOBS=
        BUILD_PREP=()
        while [[ "$1" ]]; do
            case "$1" in
                -d|--enable-debug) shift
                    BUILD_DEBUG=() ;;
                -j*)
                    # support giving -j with and without space between
                    # it and the 'n'
                    if [[ ${#1} -gt 2 ]]; then
                        BUILD_JOBS=${1:2}; shift
                    else
                        [[ -z "$2" ]] && short_usage quit
                        BUILD_JOBS="$2"; shift 2;
                    fi
                    ;;
                -p|--doprep) shift
                    BUILD_PREP=(--doprep)
                    ;;
                *)
                    break
                    ;;
            esac
        done
        [[ $BUILD_JOBS ]] || BUILD_JOBS=$(getconf _NPROCESSORS_ONLN)
        ;;
    run | ssh ) shift
        if [[ "$OPT_DEVICE" ]]; then
            cmd="ssh_as $deviceuser"
        else
            cmd=""
        fi
        ;;
    *)
        short_usage quit
        ;;
esac

$cmd "$@"

##############################################################################
exit; fi ###  S E L F - T E S T  EXECUTION BEGINS HERE #######################
##############################################################################

set -o nounset

SELF=$(readlink -f "$0")

: ${MB2_SELF_TEST_VERBOSE:=}

temp=$(mktemp -d) || exit
trap "rm -rf '$temp'" EXIT
cd "$temp" || exit

mkdir stubs || exit
STUBS_DIR=$(readlink -f stubs)
export PATH="$STUBS_DIR:$PATH"

################################################################################
# Test utils

tc_num=0
tc_failed_num=0

set_up_ts() {
    local ts=$1
    TS_NAME=$2
    ${ts}_ts_set_up
    if [[ $? -ne 0 ]]; then
        fatal "Test suite set-up failed: $ts"
    fi
}

tear_down_ts() {
    local ts=$1
    ${ts}_ts_tear_down
    if [[ $? -ne 0 ]]; then
        fatal "Test suite tear-down failed: $ts"
    fi
    TS_NAME=
}

KNOWN_ISSUES=()
KNOWN_ISSUE() {
    KNOWN_ISSUES=(${KNOWN_ISSUES[@]:+"${KNOWN_ISSUES[@]}"} "$1")
}

run_tc() {
    local tc=$1
    TC_NAME=$2
    local args=("${@:3}")

    let tc_num++
    echo "*** Executing test case: ${TS_NAME:+$TS_NAME - }$TC_NAME"

    local known_issue
    for known_issue in ${KNOWN_ISSUES[@]:+"${KNOWN_ISSUES[@]}"}; do
        echo "    Known issue: $known_issue"
    done
    KNOWN_ISSUES=()

    local stderr=
    { stderr=$(${tc}_tc ${args[@]:+"${args[@]}"} 3>&1 1>&2 2>&3 3>&-); } 2>&1
    local rc=$?

    if [[ $rc -ne 0 ]]; then
        let tc_failed_num++
    fi

    if [[ $rc -ne 0 || $MB2_SELF_TEST_VERBOSE ]]; then
        cat <<END
  ** Stderr     ** [[
$stderr
]]
END
    fi

    return $rc
}

arg_pass_stub_create() {
    while [[ ${1:-} ]]; do
        local stub=$STUBS_DIR/$1
        local results=$STUBS_DIR/$1.args

        touch "$results" || return
        cat >"$stub" <<END || return
#!/bin/bash
echo "stub invoked: \$0 \$(printf "%q " "\$@")" >&2
[[ \$# -ne 0 ]] && printf "%q\\n" "\$@" >"$results"
exit 0
END
        chmod +x "$stub" || return
        shift
    done
}

arg_pass_stub_remove() {
    while [[ ${1:-} ]]; do
        local stub=$STUBS_DIR/$1
        local results=$STUBS_DIR/$1.args
        rm -f "$stub" || return
        rm -f "$results" || return
        shift
    done
}

arg_pass_stub_results() {
    local results=$STUBS_DIR/$1.args
    cat "$results"
}

arg_pass_stub_clear() {
    while [[ ${1:-} ]]; do
        local results=$STUBS_DIR/$1.args
        :> "$results" || return
        shift
    done
}

expect_args() {
    [[ $# -ne 0 ]] && printf "%q\n" "$@" || true
}

DEFAULT_TARGET=$(. ~/.scratchbox2/config; echo "$DEFAULT_TARGET")
DEFAULT_JOBS=$(getconf _NPROCESSORS_ONLN)

if [[ -f /etc/mer-sdk-vbox ]]; then
    DEFAULT_DEVICE="Sailfish OS Emulator"
else
    echo "Note: Skipping test cases involving device connection - not inside a Sailfish OS build engine" >&2
    DEFAULT_DEVICE=
fi

################################################################################
# Test the rpm_quote function

rpm_quote_tc() {
    arg_pass_stub_create make || return

    # Create an minimal spec file
    mkdir rpm || return
    cat >rpm/test.spec <<END || return
Name: test
Version: 1.0
Release: 0
Summary: Test
License: BSD

# This would normally come from the environment
%{!?make:%define make make}

%description
Test

%build
%make "x  y"
END

    rpmbuild --dobuild --noprep --build-in-place --define "_sourcedir $(readlink -f rpm)" rpm/test.spec \
        --define "make make $(rpm_quote "a b" "c  d" e f)" >&2 || return
    local rc=0 expected= actual= diff=
    expected=$(expect_args "a b" "c  d" e f "x  y")
    actual=$(arg_pass_stub_results make) || return
    if ! diff=$(diff <(cat <<<"$expected") <(cat <<<"$actual")); then
        rc=1
        cat <<END
Test case failed: $TC_NAME
  ** Mismatch   ** [[
$diff
]]
  ** Expected   ** [[
$expected
]]
  ** Actual     ** [[
$actual
]]
END
    fi

    arg_pass_stub_remove make || return
    rm -f rpm/test.spec || return
    rmdir rpm || return

    return $rc
}

run_tc rpm_quote "Test RPM macro escaping"

################################################################################
# Test sb2 argument passing

sb2_arg_pass_ts_set_up() {
    arg_pass_stub_create sb2 || return

    # Create an empty spec file
    mkdir rpm || return
    cat >rpm/test.spec <<END || return
# Just say 'define qtc_qmake' to make check_spec_supports_qtc_silent happy
END
}

sb2_arg_pass_ts_tear_down() {
    arg_pass_stub_remove sb2 || return
    rm -f rpm/test.spec || return
    rmdir rpm || return
}

sb2_arg_pass_tc() {
    local expected=$1
    local args=("${@:2}")

    arg_pass_stub_clear sb2 || return
    "$SELF" "${args[@]}" || return
    local actual_raw= actual= diff=
    actual_raw=$(arg_pass_stub_results sb2) || return
    actual=$(sed -e 's,/tmp\.[^/]\+,/@TMPDIR@,' \
                 -e "s,/home/deploy,/tmp/@TMPDIR@," \
                 -e 's,/test\.spec\.[^/]\+,/@TEST_SPEC@,' <<<"$actual_raw")
    if ! diff=$(diff <(cat <<<"$expected") <(cat <<<"$actual")); then
        cat <<END
Test case failed: $TC_NAME
  ** Command    ** $ME $(quote "${args[@]}")
  ** Mismatch   ** [[
$diff
]]
  ** Expected   ** [[
$expected
]]
  ** Actual     ** [[
$actual
]]
  ** Actual RAW ** [[
$actual_raw
]]
END
        return 1
    fi
}

set_up_ts sb2_arg_pass "Passing arguments to sb2"

KNOWN_ISSUE "Adds trailing space to macro definitions"
KNOWN_ISSUE "Does not disable debug by default (ignores --enable-debug)"
KNOWN_ISSUE "Passes -j without argument"
KNOWN_ISSUE "Silently ignores extra arguments"
run_tc sb2_arg_pass "prep" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --define '_smp_mflags -j' \
        --define '_rpmdir /tmp/@TMPDIR@/RPMS ' \
        --define '_sourcedir /tmp/@TMPDIR@/rpm ' \
        --define '_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm ' \
        --buildroot=/tmp/@TMPDIR@/installroot \
        --doprep \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@)" \
    prep "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
run_tc sb2_arg_pass "build" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --define 'debug_package %{nil} ' \
        --define "_smp_mflags -j$(rpm_quote "bad  1")" \
        --define '_rpmdir /tmp/@TMPDIR@/RPMS ' \
        --define '_sourcedir /tmp/@TMPDIR@/rpm ' \
        --define '_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm ' \
        --buildroot=/tmp/@TMPDIR@/installroot \
        --doprep \
        --dobuild \
        --doinstall \
        --dobinary \
        --docheck \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@ \
        "a b" "c  d" e f)" \
    build --doprep -j "bad  1" "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
run_tc sb2_arg_pass "build with debug" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --define "_smp_mflags -j$(rpm_quote "bad  1")" \
        --define '_rpmdir /tmp/@TMPDIR@/RPMS ' \
        --define '_sourcedir /tmp/@TMPDIR@/rpm ' \
        --define '_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm ' \
        --buildroot=/tmp/@TMPDIR@/installroot \
        --doprep \
        --dobuild \
        --doinstall \
        --dobinary \
        --docheck \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@ \
        "a b" "c  d" e f)" \
    build --doprep --enable-debug -j "bad  1" "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
run_tc sb2_arg_pass "qmake" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --dobuild \
        --define 'noecho 1 ' \
        --define 'qtc_builddir /tmp/@TMPDIR@' \
        --define 'qtc_make true ignoring make' \
        --define "qtc_qmake5 %qmake5 $(rpm_quote "a b" "c  d" e f) " \
        --define "qtc_qmake %qmake $(rpm_quote "a b" "c  d" e f) " \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@)" \
    qmake "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
run_tc sb2_arg_pass "make" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --dobuild \
        --define 'noecho 1 ' \
        --define 'qtc_builddir /tmp/@TMPDIR@' \
        --define 'qtc_qmake5 true ignoring qmake' \
        --define 'qtc_qmake true ignoring qmake' \
        --define "qtc_make make %{?_smp_mflags} $(rpm_quote "a b" "c  d" e f) " \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@)" \
    make "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
KNOWN_ISSUE "Silently ignores extra arguments"
run_tc sb2_arg_pass "install" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --define 'noecho 1 ' \
        --define 'qtc_builddir /tmp/@TMPDIR@' \
        --define '_sourcedir /tmp/@TMPDIR@/rpm ' \
        --define '_skip_install_processing 1' \
        --buildroot='/tmp/@TMPDIR@/installroot' \
        --doinstall \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@)" \
    install "a b" "c  d" e f

KNOWN_ISSUE "Adds trailing space to macro definitions"
KNOWN_ISSUE "Silently ignores extra arguments"
run_tc sb2_arg_pass "rpm" \
    "$(expect_args \
        -t "$DEFAULT_TARGET" rpmbuild --build-in-place --target= \
        --define 'noecho 1 ' \
        --define 'qtc_builddir /tmp/@TMPDIR@' \
        --define '_rpmdir /tmp/@TMPDIR@/RPMS ' \
        --define '_sourcedir /tmp/@TMPDIR@/rpm ' \
        --define '_rpmfilename %%{name}-%%{version}-%%{release}.%%{arch}.rpm ' \
        --buildroot='/tmp/@TMPDIR@/installroot' \
        --doinstall \
        --dobinary \
        --docheck \
        /tmp/@TMPDIR@/rpm/@TEST_SPEC@)" \
    rpm "a b" "c  d" e f

tear_down_ts sb2_arg_pass

################################################################################
# Test arguments passing to commands invoked by rpmbuild

rpmbuild_arg_pass_sb2_stub() {
    echo "stub invoked: $0 $(printf "%q " "$@")" >&2

    local args=("$@")
    bad_args() {
        echo "stub $0: unexpected arguments: $(printf "%q " "${args[@]}")" >&2
    }

    if ! [[ $1 == -t && $3 != -* ]]; then
        bad_args
        return 1
    fi

    shift 2

    case $1 in
        gcc)
            case $2 in
                -dumpmachine)
                    echo "i486-meego-linux"
                    ;;
                *)
                    bad_args
                    return 1
                    ;;
            esac
            ;;
        rpmbuild)
            local args=("$@")
            for i in ${!args[*]}; do
                case ${args[i]} in
                    --doinstall|--dobinary|--docheck)
                        echo "stub $0: filtering out '${args[i]}' argument to rpmbuild" >&2
                        unset args[i]
                        ;;
                esac
            done
            # rpmbuild writes some progress messages to stdout
            exec "${args[@]}" >&2
            ;;
        rpmspec)
            exec "$@"
            ;;
        *)
            bad_args
            return 1
            ;;
    esac
}

rpmbuild_arg_pass_ts_set_up() {
    RPMBUILD_STUBS=(qmake make)
    arg_pass_stub_create "${RPMBUILD_STUBS[@]}"

    # Create an sb2 stub
    cat >"$STUBS_DIR/sb2" <<END || return
#!/bin/bash
$(declare -f rpmbuild_arg_pass_sb2_stub)
rpmbuild_arg_pass_sb2_stub "\$@"
END
    chmod +x "$STUBS_DIR/sb2" || return

    # Create a minimal spec file
    mkdir rpm || return
    cat >rpm/test.spec <<END || return
Name:       test

# These would normally come from the environment
%{!?qmake:%define qmake qmake}
%{!?qmake5:%define qmake5 qmake}

%{!?qtc_qmake:%define qtc_qmake %qmake}
%{!?qtc_qmake5:%define qtc_qmake5 %qmake5}
%{!?qtc_make:%define qtc_make make}
%{?qtc_builddir:%define _builddir %qtc_builddir}
Summary:    Test
Version:    0.1
Release:    1
Group:      Qt/Qt
License:    LICENSE
URL:        http://example.org/
Source0:    %{name}-%{version}.tar.bz2

%description
Test

%prep
%setup -q -n %{name}-%{version}

%build
%qtc_qmake5 
%qtc_make %{?_smp_mflags}

%install
mkdir -p %{buildroot}

%files
%defattr(-,root,root,-)
END
}

rpmbuild_arg_pass_ts_tear_down() {
    arg_pass_stub_remove "${RPMBUILD_STUBS[@]}" || return
    rm -f "$STUBS_DIR/sb2" || return
    rm -f rpm/test.spec || return
    rmdir rpm || return
}

rpmbuild_arg_pass_tc() {
    local all_expected=("${@:1:${#RPMBUILD_STUBS[*]}}")
    local args=("${@:1+${#RPMBUILD_STUBS[*]}}")

    local rc=0

    arg_pass_stub_clear "${RPMBUILD_STUBS[@]}"
    "$SELF" "${args[@]}" || return
    local i=
    for ((i=0; i<${#RPMBUILD_STUBS[@]}; i++)); do
        local stub= expected= actual= diff=
        stub=${RPMBUILD_STUBS[i]}
        expected=${all_expected[i]}
        actual=$(arg_pass_stub_results "$stub") || return
        if ! diff=$(diff <(cat <<<"$expected") <(cat <<<"$actual")); then
            rc=1
            cat <<END
Test case failed: $TC_NAME/$i
  ** Command    ** $ME $(printf "%q " "${args[@]}")
  ** Failed for ** $stub
  ** Mismatch   ** [[
$diff
]]
  ** Expected   ** [[
$expected
]]
  ** Actual     ** [[
$actual
]]
END
        fi
    done

    return $rc
}

set_up_ts rpmbuild_arg_pass "Passing arguments to commands invoked by rpmbuild"

run_tc rpmbuild_arg_pass "build" \
    "$(expect_args )" \
    "$(expect_args -j"$DEFAULT_JOBS")" \
    build

run_tc rpmbuild_arg_pass "qmake" \
    "$(expect_args "a b" "c  d" e f)" \
    "$(expect_args )" \
    qmake "a b" "c  d" e f

KNOWN_ISSUE "Passes extra -j to make"
if [[ $DEFAULT_JOBS -ne 1 ]]; then
    run_tc rpmbuild_arg_pass "make" \
        "$(expect_args )" \
        "$(expect_args -j"$DEFAULT_JOBS" "a b" "c  d" e f -j"$DEFAULT_JOBS")" \
        make "a b" "c  d" e f
else
    run_tc rpmbuild_arg_pass "make" \
        "$(expect_args )" \
        "$(expect_args "a b" "c  d" e f)" \
        make "a b" "c  d" e f
fi

tear_down_ts rpmbuild_arg_pass

################################################################################
# Test arguments passing to commands invoked using run|ssh subcommand

ssh_arg_pass_ts_set_up() {
    :
}

ssh_arg_pass_ts_tear_down() {
    :
}

ssh_arg_pass_tc() {
    local expected=$1
    local args=("${@:2}")

    local actual= diff=
    actual=$("$SELF" "${args[@]}")
    if ! diff=$(diff <(cat <<<"$expected") <(cat <<<"$actual")); then
        cat <<END
Test case failed: $TC_NAME
  ** Command    ** $ME $(quote "${args[@]}")
  ** Mismatch   ** [[
$diff
]]
  ** Expected   ** [[
$expected
]]
  ** Actual     ** [[
$actual
]]
END
        return 1
    fi
}

set_up_ts ssh_arg_pass "Passing arguments using run|ssh subcommand"

run_tc ssh_arg_pass "local - just spaces" \
    "$(printf '%q ' 'a b' 'c  d' e f)" \
    run printf '%q ' 'a b' 'c  d' e f

run_tc ssh_arg_pass "local - spaces and newlines" \
    "$(printf '%q'$'\n' 'echo b' 'c  d' e f)" \
    run printf '%q'$'\n' 'echo b' 'c  d' e f

run_tc ssh_arg_pass "local - spaces and backslashes" \
    "$(printf '%q\n' 'a\ b' 'c  d' e f)" \
    run printf '%q\n' 'a\ b' 'c  d' e f

if [[ $DEFAULT_DEVICE ]]; then
    run_tc ssh_arg_pass "remote - just spaces" \
        "$(printf '%q ' 'a b' 'c  d' e f)" \
        --device "$DEFAULT_DEVICE" run printf '%q ' 'a b' 'c  d' e f

    run_tc ssh_arg_pass "remote - spaces and newlines" \
        "$(printf '%q'$'\n' 'echo b' 'c  d' e f)" \
        --device "$DEFAULT_DEVICE" run printf '%q'$'\n' 'echo b' 'c  d' e f

    run_tc ssh_arg_pass "remote - spaces and backslashes" \
        "$(printf '%q\n' 'a\ b' 'c  d' e f)" \
        --device "$DEFAULT_DEVICE" run printf '%q\n' 'a\ b' 'c  d' e f
fi

tear_down_ts ssh_arg_pass

################################################################################

if [[ $tc_failed_num -eq 0 ]]; then
    echo "*** All $tc_num tests passed"
else
    echo "*** $tc_failed_num out of $tc_num failed"
fi

# For Emacs:
# Local Variables:
# indent-tabs-mode:nil
# tab-width:4
# mode: sh
# End:
# For VIM:
# vim:set softtabstop=4 shiftwidth=4 tabstop=4 expandtab:
